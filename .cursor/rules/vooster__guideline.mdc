---
description: 
globs: 
alwaysApply: true
---
# Dom Vlog Code Guideline

---

## 1. Project Overview

Dom Vlog is a full-stack, AI-powered technical blogging platform built for developers, with a phased transition from single-user MVP to a scalable, multi-tenant SaaS. The architecture leverages Next.js 15 (App Router), tRPC, Supabase (PostgreSQL), Prisma, Vercel AI SDK, and a monorepo structure. Key architectural decisions include:

- **Domain-layered modularity**: Features grouped by context (`ai`, `blog`, `user`, `admin`)
- **Monorepo with clear boundaries**: Shared code in `@/lib`, isolated features in `features/`
- **Type safety everywhere**: TypeScript, zod, Prisma
- **Serverless-first**: Vercel Edge, Supabase managed DB
- **Automated CI/CD, testing, and code quality gates**

---

## 2. Core Principles

1. **Single Responsibility**: Each file, function, and component MUST serve one clear purpose.
2. **Type Safety**: All code MUST be fully type-annotated and pass TypeScript strict mode.
3. **Explicit Data Flow**: Data transformations and side effects MUST be explicit and predictable.
4. **Test-Driven**: Every feature MUST be developed with tests first (TDD).
5. **Security by Default**: All inputs/outputs MUST be validated and sanitized at boundaries.

---

## 3. Language-Specific Guidelines

### 3.1 TypeScript / Next.js (Frontend & API)

#### File Organization

- **MUST** follow the structure:
  ```
  apps/web/src/
    app/           # Next.js App Router routes
    components/    # Generic, reusable UI components
    features/      # Domain modules: ai/, blog/, seo/, user/
    lib/           # Shared utilities: trpc/, prisma/, ai/, types/
    styles/        # Tailwind/global styles
  ```
- **MUST** colocate feature logic (UI, hooks, API calls) within `features/{domain}/`.

#### Import & Dependency Management

- **MUST** use absolute imports via `@/` alias.
- **MUST** import only what is needed (no unused imports).
- **MUST** avoid circular dependencies; refactor shared logic into `lib/` if needed.

#### Error Handling

- **MUST** handle all async errors via `try/catch` and surface user-friendly messages.
- **MUST** log errors via `next-logger` or Sentry in production.
- **MUST** use tRPC errorFormatter for API error shaping.

```typescript
// MUST: Graceful async error handling in API route
import { TRPCError } from '@trpc/server';

export const createPost = t.procedure.input(zodSchema).mutation(async ({ input }) => {
  try {
    const post = await prisma.post.create({ data: input });
    return post;
  } catch (err) {
    throw new TRPCError({
      code: 'INTERNAL_SERVER_ERROR',
      message: 'Failed to create post',
      cause: err,
    });
  }
});
```

```typescript
// MUST NOT: Unhandled async errors
export const createPost = t.procedure.input(zodSchema).mutation(async ({ input }) => {
  const post = await prisma.post.create({ data: input }); // No error handling!
  return post;
});
```

### 3.2 Prisma (ORM)

- **MUST** define schema in `/prisma/schema.prisma` and use migrations.
- **MUST** use `prisma` client via a singleton pattern.
- **MUST** validate all user input before DB operations.

```typescript
// MUST: Prisma singleton pattern
import { PrismaClient } from '@prisma/client';

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: ['error'],
  });

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;
```

### 3.3 Tailwind CSS & Shadcn UI

- **MUST** use utility classes for layout/styling; avoid custom CSS unless necessary.
- **MUST** use Shadcn UI components for consistency.
- **MUST** keep styles colocated with components if custom.

---

## 4. Code Style Rules

### 4.1 MUST Follow

1. **Airbnb TypeScript Style + Prettier**: Enforced via CI, Husky pre-commit.
2. **Strict Typing**: No `any`, always prefer specific types/interfaces.
3. **Function Length**: Functions MUST be ≤ 40 lines; split logic if longer.
4. **Naming**: Use descriptive, camelCase for variables/functions, PascalCase for components/types.
5. **Validation**: All API endpoints MUST validate input/output with zod.
6. **Test Coverage**: All business logic MUST have Vitest/Playwright coverage.
7. **Accessibility**: All UI components MUST support keyboard navigation and proper ARIA attributes.

```typescript
// MUST: Typed, validated API handler
export const updateProfile = t.procedure
  .input(z.object({ displayName: z.string().min(2) }))
  .mutation(async ({ input }) => {
    // ...
  });
```

```typescript
// MUST: Accessible button component
<button
  type="button"
  className="btn-primary"
  aria-label="Save post"
  onClick={handleSave}
>
  Save
</button>
```

### 4.2 MUST NOT Do

1. **No Mixed Concerns**: MUST NOT mix UI, business logic, and data access in a single file.
2. **No Unused/Dead Code**: MUST NOT leave commented/unreachable code in main branches.
3. **No Direct DB Access in UI**: All data access MUST go through tRPC or API layer.
4. **No Hardcoded Secrets**: MUST NOT commit secrets/tokens; use environment variables.
5. **No Implicit Any**: MUST NOT use implicit `any` types.
6. **No Complex State in Context**: MUST NOT store business logic or large state in React Context; use zustand or local state.

```typescript
// MUST NOT: Mixing DB access in a React component
export function PostEditor() {
  // BAD: Direct DB call
  const post = prisma.post.findFirst(); // ❌
  // ...
}
```

```typescript
// MUST NOT: Multiple responsibilities in one file
// File contains UI, DB, and AI logic together -- refactor!
```

---

## 5. Architecture Patterns

### 5.1 Component/Module Structure

- **MUST** organize code by domain feature (`features/{domain}/`).
- **MUST** colocate UI, hooks, and logic per feature.
- **MUST** keep each file focused (SRP).

```plaintext
features/
  blog/
    BlogList.tsx
    useBlogList.ts
    blogApi.ts
  ai/
    AiEnhancer.ts
    useAiEnhancer.ts
```

### 5.2 Data Flow Patterns

- **MUST** use tRPC for all client-server communication.
- **MUST** validate all data at API boundaries with zod.
- **MUST** keep data flow unidirectional: UI → tRPC → Service → DB/AI.

```typescript
// MUST: tRPC procedure with zod validation
export const postRouter = t.router({
  create: t.procedure.input(postSchema).mutation( /* ... */ ),
  list: t.procedure.query( /* ... */ ),
});
```

### 5.3 State Management

- **MUST** use zustand for global state; local state for component-specific logic.
- **MUST NOT** use React Context for complex or business-critical state.

```typescript
// MUST: zustand store for blog editor state
import { create } from 'zustand';

type BlogEditorState = {
  content: string;
  setContent: (v: string) => void;
};

export const useBlogEditor = create<BlogEditorState>((set) => ({
  content: '',
  setContent: (content) => set({ content }),
}));
```

### 5.4 API Design Standards

- **MUST** use tRPC routers per domain (`aiRouter`, `blogRouter`, etc.).
- **MUST** document all endpoints with OpenAPI plugin.
- **MUST** return typed, predictable error objects.

```typescript
// MUST: tRPC router per domain
export const appRouter = t.router({
  ai: aiRouter,
  blog: blogRouter,
  user: userRouter,
});
```

---

## Example Code Snippets

```typescript
// MUST: Clear separation of concerns (UI, hook, API)
--- features/blog/BlogList.tsx ---
import { useBlogList } from './useBlogList';

export function BlogList() {
  const { blogs, isLoading } = useBlogList();
  // ...
}

--- features/blog/useBlogList.ts ---
import { trpc } from '@/lib/trpc';

export function useBlogList() {
  const { data, isLoading } = trpc.blog.list.useQuery();
  return { blogs: data, isLoading };
}
```
*Explanation: UI and data-fetching logic are separated for maintainability and testability.*

```typescript
// MUST NOT: Mixing concerns in one file
export function BlogList() {
  // BAD: Data fetching and UI tightly coupled
  const [blogs, setBlogs] = useState([]);
  useEffect(() => {
    fetch('/api/blogs').then(res => res.json()).then(setBlogs);
  }, []);
  // ...
}
```
*Explanation: Avoids separation, makes testing and reuse difficult.*

---

## Quality Criteria

- **Actionable**: Each rule is prescriptive, not vague.
- **Justified**: Rationale is provided for each MUST/MUST NOT.
- **Consistent**: All guidelines align with the monorepo, type-safe, modular architecture.
- **Practical**: Examples are concise and directly usable.

---

**This document is the authoritative coding standard for Dom Vlog. All contributors MUST comply.**
